//
//  HomeInteractor.swift
//  CleanSwift
//
//  Created by Johnny Sousa on 26/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic {
    func doRequest(request: Home.Request)
}

class HomeInteractor: HomeBusinessLogic {
    
    var presenter: HomePresentationLogic?
    var worker: HomeWorkerLogic?
    
    init(worker: HomeWorkerLogic = HomeWorker()) {
        self.worker = worker
    }
    
    // MARK: Do something
    func doRequest(request: Home.Request) {
        switch request {
        case .fetchHttpItems:
            
            worker?.fetchHttpItems { result in
                switch result {
                case .success(let items):
                    self.presentHttpItems(items)
                case .failure(let error):
                    self.presentErrorFetchHttpItems(error)
                }
            }
            
        case .selectHttp(let item):
            presentHttpItem(item)
        }
    }
}

// MARK: - Private functions
extension HomeInteractor {
    
    private func presentHttpItems(_ items: [HTTPStatusCode]) {
        let response = Home.Response.dataHttpItems(items: items)
        
        presenter?.presentResponse(response: response)
    }
    
    private func presentHttpItem(_ item: HTTPStatusCode) {
        let response = Home.Response.selectHttp(item: item)
        
        presenter?.presentResponse(response: response)
    }
    
    private func presentErrorFetchHttpItems(_ error: Error) {
        let response = Home.Response.errorFetchHttpItems(error: error)
        
        presenter?.presentResponse(response: response)
    }
}
