//
//  HomeViewController.swift
//  CleanSwift
//
//  Created by Johnny Sousa on 26/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject {
    func displayViewModel(viewModel: Home.ViewModel)
}

class HomeViewController: UITableViewController {
    
    private var httpItems: [HTTPItemProtocol] = []
    
    var interactor: HomeBusinessLogic?
    var router: (HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    init() {
        super.init(nibName: nil, bundle: nil)
        
        setup()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.title = "HTTP Status Codes"
        
        tableView = UITableView(frame: .zero, style: .insetGrouped)
        
        fetchHttps()
    }
    
    // MARK: Fetch HTTPS
    func fetchHttps() {
        let request = Home.Request.fetchHttpItems
        interactor?.doRequest(request: request)
    }
}

// MARK: - HomeDisplayLogic
extension HomeViewController: HomeDisplayLogic {
    
    func displayViewModel(viewModel: Home.ViewModel) {
        switch viewModel {
        case .httpItems(let items):
            httpItems = items
            
            tableView.reloadData()
        case .selectHttp(let item):
            router?.routeToHttp(item: item)
        }
    }
}

// MARK: - UITableViewDelegate
extension HomeViewController {
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let httpItem = httpItems[indexPath.section]
        let statusCode = httpItem.statusCodes[indexPath.row]
        
        let request = Home.Request.selectHttp(item: statusCode)
        
        interactor?.doRequest(request: request)
        
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

// MARK: - UITableViewDataSource
extension HomeViewController {
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return httpItems.count
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let httpItem = httpItems[section]
        
        return httpItem.statusCodes.count
    }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        let httpItem = httpItems[section]
        
        return httpItem.responseType
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell()
        let httpItem = httpItems[indexPath.section]
        let statusCode = httpItem.statusCodes[indexPath.row]
        
        cell.textLabel?.text = "\(statusCode.rawValue)"
        
        return cell
    }
}
