//
//  HTTPInteractor.swift
//  CleanSwift
//
//  Created by Johnny Sousa on 30/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HTTPDogBusinessLogic {
    func doRequest(request: HTTPDog.Request)
}

class HTTPDogInteractor {
    
    private let worker: HTTPDogWorkerLogic?
    
    var presenter: HTTPDogPresentationLogic?
    
    init(worker: HTTPDogWorkerLogic = HTTPDogWorker()) {
        self.worker = worker
    }
}

// MARK: - HTTPDogBusinessLogic
extension HTTPDogInteractor: HTTPDogBusinessLogic {
    
    func doRequest(request: HTTPDog.Request) {
        switch request {
        case .fetchHttpDogItem(let item):
            
            worker?.fetchHttpDogItem(statusCode: item.rawValue) { result in
                switch result {
                case .success(let httpDogItem):
                    self.presentHttpDogItem(httpDogItem)
                case .failure(let error):
                    self.presentErrorFetchHttpDogItem(error)
                }
            }
            
        }
    }
}

// MARK: - Private functions
extension HTTPDogInteractor {
    
    private func presentHttpDogItem(_ item: HTTPDogItemProtocol) {
        let response = HTTPDog.Response.dataHttpDogItem(item: item)
        
        self.presenter?.presentResponse(response: response)
    }
    
    private func presentErrorFetchHttpDogItem(_ error: Error) {
        let response = HTTPDog.Response.errorFetchHttpDogItem(error: error)
        
        presenter?.presentResponse(response: response)
    }
}
