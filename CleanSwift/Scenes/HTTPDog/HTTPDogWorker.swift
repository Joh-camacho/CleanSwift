//
//  HTTPWorker.swift
//  CleanSwift
//
//  Created by Johnny Sousa on 30/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HTTPDogWorkerLogic {
    typealias completionFetchHttpDogItem = (Result<HTTPDogItemProtocol, Error>) -> ()
    
    func fetchHttpDogItem(statusCode: Int, completion: @escaping completionFetchHttpDogItem)
}

class HTTPDogWorker: HTTPDogWorkerLogic {
    
    private let service: NetworkServiceProtocol
    
    init(service: NetworkService = NetworkService()) {
        self.service = service
    }
    
    func fetchHttpDogItem(statusCode: Int, completion: @escaping completionFetchHttpDogItem) {
        let networkRequest = HTTPDogNetworkRequest.httpDog(statusCode: statusCode)
        
        service.request(networkRequest) { (result: Result<HTTPDogItem, Error>) in
            switch result {
            case .success(let httpDogItem):
                completion(.success(httpDogItem))
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
}
